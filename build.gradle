plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
    id 'pmd'
}

group 'com.github.autobump'
version '1.0-SNAPSHOT'

sourceCompatibility = 11

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
}

allprojects {
    dependencies {
        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'
        implementation "org.slf4j:slf4j-simple:1.7.30"

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'

        testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.16.0'
        implementation 'com.atlassian.connect:atlassian-connect-spring-boot-jpa-starter:2.0.6'
    }
    test {
        useJUnitPlatform()
    }
    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
            html.enabled true
        }
    }

    test.finalizedBy jacocoTestReport

    checkstyle {
        toolVersion "8.30"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    }

    pmd {
        consoleOutput = true
        ignoreFailures = false
        toolVersion = "6.22.0"
        ruleSets = []
        ruleSetFiles = rootProject.files("config/pmd/ruleset.xml")
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "autobump_autobump"
        property "sonar.organization", "autobump"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacoco {
    toolVersion "0.8.5"
}

task codeCoverageReport(type: JacocoReport) {

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
    subprojects.test
}

test.finalizedBy(codeCoverageReport)

// all tasks below: build jars with submodules
configurations {
    childJarsCli
}

dependencies {
    subprojects.each {
        if (!it.path.contains('autobump-springboot'))
            childJarsCli project(it.path)
    }
}

task jar_cli(type: Jar) {
    archiveFileName = "autobump-cli.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.childJarsCli
    from {
        configurations.childJarsCli.collect { zipTree(it) }
    } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    manifest {
        attributes 'Main-Class': 'com.github.autobump.cli.model.Autobump'
    }

}

task jar_springboot(type: Copy) {
    from project(':autobump-spring-boot').getBuildDir().toString() + "/libs"
    include '**/*.jar'
    into getBuildDir().toString() + "/libs"
}

jar_springboot.dependsOn(':autobump-spring-boot:bootJar')

task BuildAndMakeJars(dependsOn: [build, jar_springboot, jar_cli]) {
}


jar.enabled = false
